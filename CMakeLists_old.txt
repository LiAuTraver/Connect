set(CMAKE_SYSTEM_NAME Windows)
cmake_minimum_required(VERSION 3.26)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_CXX_EXTENSIONS OFF)
project(Connect)
set(PROJECT_NAME "Connect")
set(QT_VERSION_MAJOR "6")
# set(CMAKE_TOOLCHAIN_FILE "C:/Users/LiAu/.vcpkg-clion/vcpkg/scripts/buildsystems/vcpkg.cmake")
# check windows or linux
if (WIN32)
    message(STATUS "Windows")
    if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(STATUS "Using MSVC.")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++latest /Zc:__cplusplus /Zc:inline /Zc:wchar_t /EHsc")
        set(CMAKE_PREFIX_PATH "C:/Qt/6.6.3/msvc2019_64/lib/cmake/Qt6")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        message(STATUS "Using MinGW g++.")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++2a")
        set(CMAKE_PREFIX_PATH "C:/Qt/6.6.3/mingw_64/lib/cmake/Qt6")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        message(STATUS "Using llvm clang++.")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++latest")
        set(CMAKE_PREFIX_PATH "C:/Qt/6.6.3/msvc2019_64/lib/cmake/Qt6")
    endif ()
elseif (UNIX)
    message(STATUS "Linux, using g++.")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++2a")
endif ()
list(APPEND CMAKE_PREFIX_PATH "M:/vcpkg/installed/x64-windows")
message(STATUS "CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")
message(STATUS "CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
find_package(Qt NAMES
        Qt${QT_VERSION_MAJOR}
        REQUIRED
        COMPONENTS
        Core
        Gui
        Widgets
        Multimedia
        REQUIRED
)

# Generate resources.qrc
add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/resources.qrc
        COMMAND ${CMAKE_COMMAND} -E echo "Running generate_qrc.py script..."
        COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_SOURCE_DIR}/Helpers/generate_qrc.py
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Helpers/generate_qrc.py
        COMMENT "Generating QRC file using generate_qrc.py"
)

# Create a custom target that depends on the custom command
add_custom_target(run_generate_qrc ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/resources.qrc)

# Ensure Python executable is found
find_package(PythonInterp 3 REQUIRED)
if (NOT PYTHON_EXECUTABLE)
    message(FATAL_ERROR "Python 3 interpreter not found")
endif()

# Make sure the custom target runs before the actual build
add_dependencies(Connect run_generate_qrc)

find_package(fmt CONFIG REQUIRED)
find_package(absl CONFIG REQUIRED)
find_package(nlohmann_json CONFIG REQUIRED)
set(TARGET_LINK_PACKAGES
        fmt::fmt
        absl::base
        absl::log
        absl::any
        nlohmann_json::nlohmann_json
)
#set(INCLUDE ${CMAKE_SOURCE_DIR}/include)
#set(SOURCE ${CMAKE_SOURCE_DIR}/src)
#set(INCLUDE_FILE
#        include/config.hpp
#        ViewModels/menu.cpp
#        include/menu.hpp
#        ViewModels/menu.ui
#        Views/mainwindow.cpp
#        include/mainwindow.hpp
#        Views/mainwindow.ui
#        ViewModels/game.cpp
#        include/game.hpp
#        ViewModels/game.ui
#        include/Block.hpp
#        Models/Block.cpp
#        include/Blocks.hpp
#        Services/Blocks.cpp
#        Models/Point.cpp
#        include/Point.hpp
#        Helpers/NotImplementedException.cpp
#        include/NotImplementedException.hpp
#)
set(PCH ${CMAKE_SOURCE_DIR}/pch)
file(GLOB GLOBAL_PCH_HEADER "${PCH}/*.hh")
file(GLOB_RECURSE SOURCE_FILE "${CMAKE_SOURCE_DIR}/*.cpp")
file(GLOB_RECURSE QT_UI_FILE "${CMAKE_SOURCE_DIR}/*.ui")
file(GLOB_RECURSE HEADER_FILE "${CMAKE_SOURCE_DIR}/*.hpp")

add_executable(Connect
        main.cpp
        resources.qrc
        ${HEADER_FILE}
        ${INCLUDE_FILE}
        ${SOURCE_FILE}
        ${QT_UI_FILE}

)

target_link_libraries(Connect PRIVATE
        Qt::Core
        Qt::Gui
        Qt::Widgets
        Qt::Multimedia
        ${TARGET_LINK_PACKAGES}
)
target_include_directories(Connect PUBLIC
        ${CMAKE_SOURCE_DIR}
)
target_precompile_headers(Connect PRIVATE
        ${GLOBAL_PCH_HEADER}
)

# Auto generated by CLion.
if (WIN32 AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
    set(DEBUG_SUFFIX)
    if (MSVC AND CMAKE_BUILD_TYPE MATCHES "Debug")
        set(DEBUG_SUFFIX "d")
    endif ()
    set(QT_INSTALL_PATH "${CMAKE_PREFIX_PATH}")
    if (NOT EXISTS "${QT_INSTALL_PATH}/bin")
        set(QT_INSTALL_PATH "${QT_INSTALL_PATH}/..")
        if (NOT EXISTS "${QT_INSTALL_PATH}/bin")
            set(QT_INSTALL_PATH "${QT_INSTALL_PATH}/..")
        endif ()
    endif ()
    if (EXISTS "${QT_INSTALL_PATH}/plugins/platforms/qwindows${DEBUG_SUFFIX}.dll")
        add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E make_directory
                "$<TARGET_FILE_DIR:${PROJECT_NAME}>/plugins/platforms/")
        add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy
                "${QT_INSTALL_PATH}/plugins/platforms/qwindows${DEBUG_SUFFIX}.dll"
                "$<TARGET_FILE_DIR:${PROJECT_NAME}>/plugins/platforms/")
    endif ()
    foreach (QT_LIB Core Gui Widgets)
        add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy
                "${QT_INSTALL_PATH}/bin/Qt6${QT_LIB}${DEBUG_SUFFIX}.dll"
                "$<TARGET_FILE_DIR:${PROJECT_NAME}>")
    endforeach (QT_LIB)
endif ()
